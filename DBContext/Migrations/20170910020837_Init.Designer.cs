// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SharedHardware.Data;
using SharedHardware.Models;
using System;

namespace SharedHardware.Data.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20170910020837_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("SharedHardware.Models.AccountConfirmationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("ExpirationDate")
                        .IsConcurrencyToken();

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AccountConfirmationCode");
                });

            modelBuilder.Entity("SharedHardware.Models.Computation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BundleUrl")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("EntryPoint")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<Guid?>("LastDeploymentId");

                    b.Property<Guid>("PlatformTagId");

                    b.Property<long?>("PlatformTagId1");

                    b.Property<Guid>("ScheduleId");

                    b.Property<DateTime>("UpdateDate")
                        .IsConcurrencyToken();

                    b.HasKey("Id");

                    b.HasIndex("LastDeploymentId")
                        .IsUnique()
                        .HasFilter("[LastDeploymentId] IS NOT NULL");

                    b.HasIndex("PlatformTagId1");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Computations");
                });

            modelBuilder.Entity("SharedHardware.Models.ComputationDeployment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ComputationId");

                    b.Property<DateTime?>("DoneTime");

                    b.Property<string>("Message");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("State");

                    b.Property<Guid>("SystemDeploymentId");

                    b.HasKey("Id");

                    b.HasIndex("ComputationId");

                    b.HasIndex("SystemDeploymentId");

                    b.ToTable("ComputationDeployments");
                });

            modelBuilder.Entity("SharedHardware.Models.ComputationSubscription", b =>
                {
                    b.Property<Guid>("ComputationId");

                    b.Property<Guid>("ContactId");

                    b.Property<int>("Type");

                    b.HasKey("ComputationId", "ContactId", "Type");

                    b.HasIndex("ContactId");

                    b.ToTable("ComputationSubscriptions");
                });

            modelBuilder.Entity("SharedHardware.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("Confirmed");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsMain");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Type");

                    b.Property<DateTime>("UpdateDate")
                        .IsConcurrencyToken();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("SharedHardware.Models.Credit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsPaid");

                    b.Property<Guid>("ResourceOwnerId");

                    b.Property<Guid>("ResourceUserId");

                    b.Property<decimal>("ToPay");

                    b.HasKey("Id");

                    b.HasIndex("ResourceOwnerId");

                    b.HasIndex("ResourceUserId");

                    b.ToTable("Credits");
                });

            modelBuilder.Entity("SharedHardware.Models.Geolocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("char(2)");

                    b.Property<string>("State")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Geo");
                });

            modelBuilder.Entity("SharedHardware.Models.NotificationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ContactId");

                    b.Property<Guid?>("ContactId1");

                    b.Property<bool>("IsSent");

                    b.Property<string>("Message");

                    b.Property<string>("Subject")
                        .HasMaxLength(200);

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ContactId1");

                    b.ToTable("NotificationLog");
                });

            modelBuilder.Entity("SharedHardware.Models.Platform", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<double>("CalculatedSLA");

                    b.Property<string>("Comment")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DetectedOsVersion")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("DoneWithoutDown");

                    b.Property<int>("DownCount");

                    b.Property<double>("ExpectedSLA");

                    b.Property<Guid>("GeolocationId");

                    b.Property<bool>("IsUp");

                    b.Property<long?>("LastOutageId");

                    b.Property<Guid>("PlatformTypeId");

                    b.Property<int?>("PlatformTypeId1");

                    b.Property<string>("PublicIP")
                        .HasColumnType("varchar(39)");

                    b.Property<int>("RunCount");

                    b.Property<DateTime>("UpdateDate")
                        .IsConcurrencyToken();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GeolocationId");

                    b.HasIndex("PlatformTypeId1");

                    b.HasIndex("UserId");

                    b.HasIndex("Id", "LastOutageId")
                        .IsUnique()
                        .HasFilter("[LastOutageId] IS NOT NULL");

                    b.ToTable("Platform");
                });

            modelBuilder.Entity("SharedHardware.Models.PlatformEventLog", b =>
                {
                    b.Property<Guid>("PlatformId");

                    b.Property<long>("EventId");

                    b.Property<string>("Message");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int>("Type");

                    b.HasKey("PlatformId", "EventId");

                    b.ToTable("PlatformEventLog");
                });

            modelBuilder.Entity("SharedHardware.Models.PlatformOutage", b =>
                {
                    b.Property<Guid>("PlatformId");

                    b.Property<long>("OutageId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("PlatformId", "OutageId");

                    b.ToTable("PlatformOutages");
                });

            modelBuilder.Entity("SharedHardware.Models.PlatformRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .HasMaxLength(255);

                    b.Property<Guid>("ComputationId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<double>("ExpectedSLA");

                    b.Property<Guid>("GeolocationId");

                    b.Property<Guid>("TypeId");

                    b.Property<int?>("TypeId1");

                    b.Property<DateTime>("UpdateDate")
                        .IsConcurrencyToken();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ComputationId");

                    b.HasIndex("GeolocationId");

                    b.HasIndex("TypeId1");

                    b.HasIndex("UserId");

                    b.ToTable("PlatformRequests");
                });

            modelBuilder.Entity("SharedHardware.Models.PlatformSubscription", b =>
                {
                    b.Property<Guid>("PlatformId");

                    b.Property<Guid>("ContactId");

                    b.Property<int>("Type");

                    b.HasKey("PlatformId", "ContactId", "Type");

                    b.HasIndex("ContactId");

                    b.ToTable("PlatformSubscriptions");
                });

            modelBuilder.Entity("SharedHardware.Models.PlatformTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PlatformTags");
                });

            modelBuilder.Entity("SharedHardware.Models.PlatformToPlatformTag", b =>
                {
                    b.Property<Guid>("PlatformId");

                    b.Property<long>("PlatformTagId");

                    b.HasKey("PlatformId", "PlatformTagId");

                    b.HasIndex("PlatformTagId");

                    b.ToTable("PlatformToPlatformTag");
                });

            modelBuilder.Entity("SharedHardware.Models.PlatformType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PlatformTypes");
                });

            modelBuilder.Entity("SharedHardware.Models.Run", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ComputationId");

                    b.Property<DateTime?>("DoneTime");

                    b.Property<Guid>("PlatformId");

                    b.Property<Guid>("ScheduleId");

                    b.Property<Guid>("SharedResourceId");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("SharedResourceId");

                    b.ToTable("Runs");
                });

            modelBuilder.Entity("SharedHardware.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CronSchedule")
                        .HasColumnType("varchar(100)");

                    b.Property<TimeSpan>("Interval");

                    b.Property<DateTime?>("StartDateTime");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("SharedHardware.Models.SharedResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AvailabilityTimeId");

                    b.Property<int?>("CpuCoreNumber");

                    b.Property<int?>("CpuPercentage");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("DiskSpace");

                    b.Property<bool>("IsActive");

                    b.Property<decimal?>("MinAuctionPrice");

                    b.Property<int>("Period");

                    b.Property<Guid>("PlatformId");

                    b.Property<decimal?>("Price");

                    b.Property<int?>("Ram");

                    b.Property<DateTime>("UpdateDate")
                        .IsConcurrencyToken();

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityTimeId");

                    b.HasIndex("PlatformId");

                    b.ToTable("SharedResources");
                });

            modelBuilder.Entity("SharedHardware.Models.SystemDeployment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("EndTime");

                    b.Property<string>("Message");

                    b.Property<Guid>("PlatformId");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("SystemDeployments");
                });

            modelBuilder.Entity("SharedHardware.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("BlockedForPaidResources");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsOrganization");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SharedHardware.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SharedHardware.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SharedHardware.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SharedHardware.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SharedHardware.Models.Computation", b =>
                {
                    b.HasOne("SharedHardware.Models.ComputationDeployment", "LastDeployment")
                        .WithOne()
                        .HasForeignKey("SharedHardware.Models.Computation", "LastDeploymentId");

                    b.HasOne("SharedHardware.Models.PlatformTag", "PlatformTag")
                        .WithMany("Computations")
                        .HasForeignKey("PlatformTagId1");

                    b.HasOne("SharedHardware.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SharedHardware.Models.ComputationDeployment", b =>
                {
                    b.HasOne("SharedHardware.Models.Computation", "Computation")
                        .WithMany()
                        .HasForeignKey("ComputationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SharedHardware.Models.SystemDeployment", "SystemDeployment")
                        .WithMany()
                        .HasForeignKey("SystemDeploymentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SharedHardware.Models.ComputationSubscription", b =>
                {
                    b.HasOne("SharedHardware.Models.Computation", "Computation")
                        .WithMany()
                        .HasForeignKey("ComputationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SharedHardware.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SharedHardware.Models.Contact", b =>
                {
                    b.HasOne("SharedHardware.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SharedHardware.Models.Credit", b =>
                {
                    b.HasOne("SharedHardware.Models.User", "ResourceOwner")
                        .WithMany("ToReceiveCredits")
                        .HasForeignKey("ResourceOwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SharedHardware.Models.User", "ResourceUser")
                        .WithMany("ToPayCredits")
                        .HasForeignKey("ResourceUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SharedHardware.Models.NotificationLog", b =>
                {
                    b.HasOne("SharedHardware.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId1");
                });

            modelBuilder.Entity("SharedHardware.Models.Platform", b =>
                {
                    b.HasOne("SharedHardware.Models.Geolocation", "Geolocation")
                        .WithMany()
                        .HasForeignKey("GeolocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SharedHardware.Models.PlatformType", "PlatformType")
                        .WithMany()
                        .HasForeignKey("PlatformTypeId1");

                    b.HasOne("SharedHardware.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SharedHardware.Models.PlatformOutage", "LastOutage")
                        .WithOne()
                        .HasForeignKey("SharedHardware.Models.Platform", "Id", "LastOutageId");
                });

            modelBuilder.Entity("SharedHardware.Models.PlatformEventLog", b =>
                {
                    b.HasOne("SharedHardware.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SharedHardware.Models.PlatformOutage", b =>
                {
                    b.HasOne("SharedHardware.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SharedHardware.Models.PlatformRequest", b =>
                {
                    b.HasOne("SharedHardware.Models.Computation", "Computation")
                        .WithMany()
                        .HasForeignKey("ComputationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SharedHardware.Models.Geolocation", "Geolocation")
                        .WithMany()
                        .HasForeignKey("GeolocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SharedHardware.Models.PlatformType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId1");

                    b.HasOne("SharedHardware.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SharedHardware.Models.PlatformSubscription", b =>
                {
                    b.HasOne("SharedHardware.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SharedHardware.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SharedHardware.Models.PlatformToPlatformTag", b =>
                {
                    b.HasOne("SharedHardware.Models.Platform", "Platform")
                        .WithMany("PlatformTags")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SharedHardware.Models.PlatformTag", "PlatformTag")
                        .WithMany("PlatformTags")
                        .HasForeignKey("PlatformTagId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SharedHardware.Models.Run", b =>
                {
                    b.HasOne("SharedHardware.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SharedHardware.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SharedHardware.Models.SharedResource", "SharedResource")
                        .WithMany()
                        .HasForeignKey("SharedResourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SharedHardware.Models.SharedResource", b =>
                {
                    b.HasOne("SharedHardware.Models.Schedule", "AvailabilityTime")
                        .WithMany()
                        .HasForeignKey("AvailabilityTimeId");

                    b.HasOne("SharedHardware.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SharedHardware.Models.SystemDeployment", b =>
                {
                    b.HasOne("SharedHardware.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
